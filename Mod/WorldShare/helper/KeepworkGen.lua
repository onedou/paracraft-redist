--[[
Title: keepworkGen
Author(s): big
Date: 2017.4.24
Desc: generate KeepWork documentation 
-------------------------------------------------------
local KeepworkGen = NPL.load("(gl)Mod/WorldShare/helper/KeepworkGen.lua")
-------------------------------------------------------
]]
local KeepworkGen = NPL.export()

--@param output: array of strings
--@param content: default to ""
--@return autogen_code_index
function KeepworkGen:InjectContent(output, content)
    local autogen_code_index
    output[#output + 1] = "<!-- BEGIN_AUTOGEN: do NOT edit in this block -->\r\n"
    output[#output + 1] = content or ""
    autogen_code_index = #output
    output[#output + 1] = "<!-- END_AUTOGEN-->\r\n"

    return autogen_code_index
end

function KeepworkGen:GetContent(content)
    local from_code, from_code_end = content:find("<!%-%-%s*BEGIN_AUTOGEN: do NOT edit in this block %-%->")

    if (from_code) then
        local to_code, to_code_end = content:find("<!%-%-%s*END_AUTOGEN[^\r\n]*[\r\n]+", from_code_end)
        if (to_code) then
            return content:sub(from_code_end + 1, to_code - 1)
        end
    end
end

-- return array of text blocks and the index at which to insert autogenerated code.
-- @return output, autogen_code_index
function KeepworkGen:GetAutoGenContent(content)
    local output = {}
    local autogen_code_index

    local from_code, from_code_end = content:find("<!%-%-%s*BEGIN_AUTOGEN: do NOT edit in this block %-%->")

    if (from_code) then
        local to_code, to_code_end = content:find("<!%-%-%s*END_AUTOGEN[^\r\n]*[\r\n]+", from_code_end)
        if (to_code) then
            if (from_code > 1) then
                output[#output + 1] = content:sub(1, from_code - 1)
            end
            autogen_code_index = self:InjectContent(output)
            output[#output + 1] = content:sub(to_code_end + 1, -1)
        end
    end

    if (not autogen_code_index) then
        autogen_code_index = self:InjectContent(output)
        output[#output + 1] = content
    end

    return output, autogen_code_index
end

function KeepworkGen:SetAutoGenContent(content, text)
    if (not text and type(text) ~= "string") then
        return
    end

    local output, autogen_code_index = self:GetAutoGenContent(content)
    if (output) then
        output[autogen_code_index] = text
        return table.concat(output, "")
    end
end

function KeepworkGen:setCommand(command, params)
    local content = [[
```@{{command}}
{{params}}
```
]]

    if (command) then
        content = content:gsub("{{command}}", command)
    else
        content = content:gsub("{{command}}", "")
    end

    if (params) then
        params = NPL.ToJson(params, true)
    else
        params = ""
    end

    content = content:gsub("{{params}}", params)

    return content
end

function KeepworkGen:getCommand(command, content)
    content = content:gsub("```@" .. command, "")
    content = content:gsub("```", "")

    local params = {}
    NPL.FromJson(content, params)

    return params
end

function KeepworkGen:GetReadmeFile()
    local root = "Mod/WorldShare/template/readme/"

    local file = ParaIO.open(format("%s%s", root, L"paracraft.readme.txt"), "r")
    local fileContent = ""

    if (file:IsValid()) then
        fileContent = file:GetText(0, -1)
        file:close()
    end

    return fileContent
end

function KeepworkGen:GetParacraftCommand(params)
    local template =
        [[
```@Paracraft
styleID: 0
preview:
    src: {{preview}}
    link: ''
    target: _self
desc:
    data: ''
worldName:
    name: {{worldName}}
    link: ''
    target: _self
author:
    text: {{author}}
    desc: ''
    link: ''
    target: _self
version:
    text: {{version}}
    desc: ''
    link: ''
    target: _self
updateTime:
    text: {{updateTime}}
    link: ''
    target: _self
viewTimesImg:
    src: ''
    link: ''
    webWidth: ''
    mobileWidth: ''
    target: _self
viewTimes:
    text: ''
    desc: ''
    link: ''
    target: _self
size:
    text: {{size}}
    desc: ''
    link: ''
    target: _self
download:
    name: ''
    link: {{download}}
    width: ''
    height: ''
    src: ''
    color: ''
    fontSize: ''
    target: _self
enter:
    name: ''
    link: {{enter}}
    width: ''
    height: ''
    src: ''
    color: ''
    fontSize: ''
    target: _self
innerModal: {}
paracraftInfo:
    text: ''
    link: ''
    target: _self
titleA:
    name: ''
    link: ''
    target: _self
subtitleA:
    name: ''
    link: ''
    target: _self
backgroundImage:
    src: ''
    link: ''
    webWidth: ''
    mobileWidth: ''
    target: _self
```
]]

    local result = template:gsub('{{preview}}', params.preview or '')
    result = result:gsub('{{worldName}}', params.worldName or '')
    result = result:gsub('{{author}}', params.author or '')
    result = result:gsub('{{version}}', params.version or '')
    result = result:gsub('{{updateTime}}', params.updateTime or '')
    result = result:gsub('{{size}}', params.size or '')
    result = result:gsub('{{enter}}', params.download or '')
    result = result:gsub('{{download}}', params.download or '')

    return result
end